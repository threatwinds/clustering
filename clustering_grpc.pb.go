// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: clustering.proto

package clustering

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cluster_Register_FullMethodName      = "/clustering.Cluster/Register"
	Cluster_MasterVote_FullMethodName    = "/clustering.Cluster/MasterVote"
	Cluster_Ping_FullMethodName          = "/clustering.Cluster/Ping"
	Cluster_Receiver_FullMethodName      = "/clustering.Cluster/Receiver"
	Cluster_ElectedMaster_FullMethodName = "/clustering.Cluster/ElectedMaster"
)

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	Register(ctx context.Context, in *Member, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MasterVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Ping(ctx context.Context, opts ...grpc.CallOption) (Cluster_PingClient, error)
	Receiver(ctx context.Context, opts ...grpc.CallOption) (Cluster_ReceiverClient, error)
	ElectedMaster(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Register(ctx context.Context, in *Member, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cluster_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MasterVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cluster_MasterVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Ping(ctx context.Context, opts ...grpc.CallOption) (Cluster_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cluster_ServiceDesc.Streams[0], Cluster_Ping_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterPingClient{stream}
	return x, nil
}

type Cluster_PingClient interface {
	Send(*Pong) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type clusterPingClient struct {
	grpc.ClientStream
}

func (x *clusterPingClient) Send(m *Pong) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterPingClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterClient) Receiver(ctx context.Context, opts ...grpc.CallOption) (Cluster_ReceiverClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cluster_ServiceDesc.Streams[1], Cluster_Receiver_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterReceiverClient{stream}
	return x, nil
}

type Cluster_ReceiverClient interface {
	Send(*Message) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type clusterReceiverClient struct {
	grpc.ClientStream
}

func (x *clusterReceiverClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterReceiverClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterClient) ElectedMaster(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cluster_ElectedMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility
type ClusterServer interface {
	Register(context.Context, *Member) (*emptypb.Empty, error)
	MasterVote(context.Context, *Vote) (*emptypb.Empty, error)
	Ping(Cluster_PingServer) error
	Receiver(Cluster_ReceiverServer) error
	ElectedMaster(context.Context, *Vote) (*emptypb.Empty, error)
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (UnimplementedClusterServer) Register(context.Context, *Member) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedClusterServer) MasterVote(context.Context, *Vote) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterVote not implemented")
}
func (UnimplementedClusterServer) Ping(Cluster_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClusterServer) Receiver(Cluster_ReceiverServer) error {
	return status.Errorf(codes.Unimplemented, "method Receiver not implemented")
}
func (UnimplementedClusterServer) ElectedMaster(context.Context, *Vote) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectedMaster not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Register(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MasterVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MasterVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_MasterVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MasterVote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterServer).Ping(&clusterPingServer{stream})
}

type Cluster_PingServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Pong, error)
	grpc.ServerStream
}

type clusterPingServer struct {
	grpc.ServerStream
}

func (x *clusterPingServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterPingServer) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cluster_Receiver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterServer).Receiver(&clusterReceiverServer{stream})
}

type Cluster_ReceiverServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type clusterReceiverServer struct {
	grpc.ServerStream
}

func (x *clusterReceiverServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterReceiverServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cluster_ElectedMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ElectedMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ElectedMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ElectedMaster(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clustering.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Cluster_Register_Handler,
		},
		{
			MethodName: "MasterVote",
			Handler:    _Cluster_MasterVote_Handler,
		},
		{
			MethodName: "ElectedMaster",
			Handler:    _Cluster_ElectedMaster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Cluster_Ping_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Receiver",
			Handler:       _Cluster_Receiver_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clustering.proto",
}
